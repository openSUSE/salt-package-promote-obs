#!/usr/bin/env groovy

// Configure the build properties
properties([
    buildDiscarder(logRotator(numToKeepStr: '20')),
    disableConcurrentBuilds(),
])

pipeline {

    parameters {
        string(defaultValue: '3004', description: 'Salt version to promote from products:testing to products.', name: 'salt_version')
        string(defaultValue: '', description: 'SUSE Manager maintenance update version that this Salt update is released with, e.g. 4.1.7', name: 'mu_version')
    }

    agent { label 'manager-jenkins-node' }

    stages {
        stage('Initial Checks') {
            steps {
                echo "Check that 'openSUSE/MU/${mu_version}' branch exists at https://github.com/openSUSE/salt"
                sh "curl -I --fail https://codeload.github.com/openSUSE/salt/tar.gz/openSUSE/MU/${mu_version}"

                echo "Check that 'MU/${mu_version}' branch exists at https://github.com/openSUSE/salt-packaging"
                sh "curl -I --fail https://codeload.github.com/openSUSE/salt-packaging/tar.gz/MU/${mu_version}"

                echo "Check that 'products:testing' and 'products:testing:debian' are not set to MU branches"
                sh "! curl https://build.opensuse.org/package/view_file/systemsmanagement:saltstack:products:testing/salt/_service?expand=1 | grep MU/${mu_version}"
                sh "! curl https://build.opensuse.org/package/view_file/systemsmanagement:saltstack:products:testing:debian/salt/_service?expand=1 | grep MU/${mu_version}"

                echo "Check the source tarball is properly named to salt_${salt_version}.orig.tar.gz in 'products:testing:debian'"
                sh "curl https://build.opensuse.org/package/view_file/systemsmanagement:saltstack:products:testing:debian/salt/_service?expand=0 | grep salt_${salt_version}.orig.tar.g"
            }
        }

        stage('Create temporary OBS environment') {
            steps {
                sh "mkdir /tmp/salt-promote-pipeline-env || true"
            }
        }

        stage('Promote Salt testing RPM packages') {
            steps {
                echo 'Promote Salt testing packages from "products:testing" to "products"'
                sh "osc copypac systemsmanagement:saltstack:products:testing salt systemsmanagement:saltstack:products"
                sh "osc copypac systemsmanagement:saltstack:products:testing python-contextvars systemsmanagement:saltstack:products"
                sh "osc copypac systemsmanagement:saltstack:products:testing python3-contextvars systemsmanagement:saltstack:products"
                sh "osc copypac systemsmanagement:saltstack:products:testing python-immutables systemsmanagement:saltstack:products"
                sh "osc copypac systemsmanagement:saltstack:products:testing python3-immutables systemsmanagement:saltstack:products"
                sh "osc copypac systemsmanagement:saltstack:products:testing py26-compat-salt systemsmanagement:saltstack:products"
                sh "osc copypac systemsmanagement:saltstack:products:testing py26-compat-tornado systemsmanagement:saltstack:products"
                sh "osc copypac systemsmanagement:saltstack:products:testing py26-compat-msgpack-python systemsmanagement:saltstack:products"
                sh "osc copypac systemsmanagement:saltstack:products:testing py27-compat-salt systemsmanagement:saltstack:products"
                sh "osc copypac systemsmanagement:saltstack:products:old:testing salt systemsmanagement:saltstack:products:old"
            }
        }

        stage('Promote Salt testing DEB packages') {
            steps {
                dir('/tmp/salt-promote-pipeline-env') {
                    echo 'Disable services in "products:testing:debian"'
                    sh "osc co systemsmanagement:saltstack:products:testing:debian salt"
                    dir('/tmp/salt-promote-pipeline-env/systemsmanagement:saltstack:products:testing:debian/salt') {
                        sh "cp _service _service.backup"
                        sh "sed -i 's/name=\"download_url\">/name=\"download_url\" mode=\"disabled\">/g' _service"

                        echo 'Execute disabled services to ensure tarball is updated in "products:testing:debian"'
                        sh "osc service disabledrun || true"
                        sh "osc add salt_${salt_version}.orig.tar.gz"
                        sh "osc commit -m 'Disable services and temporary add tarball before promoting'"

                        echo 'Promote "products:testing:debian" packages'
                        sh "osc copypac --keep-link systemsmanagement:saltstack:products:testing:debian salt systemsmanagement:saltstack:products:debian"
                        sh "osc copypac systemsmanagement:saltstack:products:testing:debian python3-contextvars systemsmanagement:saltstack:products:debian"
                        sh "osc copypac systemsmanagement:saltstack:products:testing:debian python3-immutables systemsmanagement:saltstack:products:debian"
                        sh "osc copypac systemsmanagement:saltstack:products:testing:debian python3-zmq systemsmanagement:saltstack:products:debian"
                        sh "osc copypac systemsmanagement:saltstack:products:testing:debian python3-gnupg systemsmanagement:saltstack:products:debian"

                        echo 'Re-enable services in "products:testing:debian"'
                        sh "cp _service.backup _service"
                        sh "osc rm salt_${salt_version}.orig.tar.gz"
                        sh "osc commit -m 'Remove tarball and disable service after promoting'"
                    }
                    sh "rm systemsmanagement:saltstack:products:testing:debian/salt -rf"
                }
            }
        }
    }

    post {
        always {
            echo 'Remove OBS environment at /tmp/salt-promote-pipeline-env'
            sh "rm /tmp/salt-promote-pipeline-env -rf || true"
        }
    }
}
